/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> l =new ArrayList<Integer>();
        if(root==null)
        return l;
        Deque<Pair<TreeNode,Integer>> q = new ArrayDeque<Pair<TreeNode,Integer>>();
        q.offerLast(new Pair(root,0));
        l.add(root.val);
        Pair<TreeNode,Integer> temp = null;
        while(!q.isEmpty())
        {
            temp = q.pollFirst();
            TreeNode key = temp.getKey();
            int level = temp.getValue();
            if(l.size()-1 == level)
            l.set(level,key.val);
            else
            l.add(key.val);
            if(key.left != null)
            q.offerLast(new Pair(key.left,level+1));
            if(key.right != null)
            q.offerLast(new Pair(key.right,level+1));

        }
        return l;
    }
}
