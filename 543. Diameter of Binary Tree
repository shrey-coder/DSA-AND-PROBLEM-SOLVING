/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        // Pair<Integer,Integer> p  = findDiameter(root);
        // return p.getValue();
        solve(root);
        return max;

    }
    // public Pair<Integer,Integer> findDiameter(TreeNode root)
    // {
    //     if(root==null)
    //     return new Pair<>(0,0);

    //     Pair<Integer,Integer> left = findDiameter(root.left);
    //     Pair<Integer,Integer> right = findDiameter(root.right);
    //     int leftHeight = left.getKey();
    //     int rightHeight = right.getKey();
    //     int longestPath = leftHeight + rightHeight;
    //     return new Pair<>(Math.max(leftHeight,rightHeight)+1,Math.max(longestPath,Math.max(left.getValue(),right.getValue())));
    // }
    public int solve(TreeNode root)
    {
        if(root==null)
            return 0;
        int left = solve(root.left);
        int right = solve(root.right);

        max = Math.max(max,left+right);

        return Math.max(left,right)+1;
    }
}
