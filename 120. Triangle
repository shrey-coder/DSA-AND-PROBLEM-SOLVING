class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()][(triangle.get(triangle.size()-1).size())];
        for(int i=0;i<triangle.size();i++)
        for(int j=0;j<(triangle.get(triangle.size()-1).size());j++)
        dp[i][j] = Integer.MAX_VALUE;
        return solve(triangle,triangle.size()-1,0,(triangle.get(triangle.size()-1).size()-1),dp);
    }
    public int solve(List<List<Integer>> triangle,int lvl,int index,int end,int[][]dp)
    {
        if(lvl==0 && index==0)
        return (triangle.get(lvl)).get(index);
        if(index < 0 || index >= (triangle.get(lvl)).size())
        return Integer.MAX_VALUE;
        if(dp[lvl][index]!=Integer.MAX_VALUE)
        return dp[lvl][index];
        int min = Integer.MAX_VALUE;
        for(int i=index;i<=end;i++)
        {
        int right = solve(triangle,lvl-1,i,i,dp);
        if(right!=Integer.MAX_VALUE)
        dp[lvl-1][i] = right;
        int left = solve(triangle,lvl-1,i-1,i-1,dp);
        if(left!=Integer.MAX_VALUE)
        dp[lvl-1][i-1] = left;
        min = Math.min(Math.min(left,right)+(triangle.get(lvl)).get(i),min);
        }
        return min;
    }
}
