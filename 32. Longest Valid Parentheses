class Solution {
    public int longestValidParentheses(String s) {
        if(s.equals(""))
        return 0;
        Stack<Integer> st = new Stack<Integer>();
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='(')
            st.push(i+1);
            else
            {
                if(!st.empty() && s.charAt(st.peek()-1)=='(')
                {   
                    st.pop();
                }
                else
                st.push(i+1);
            }
        }
        if(st.size()==0)
        return s.length();
        if(st.size()==1)
        {
            int pos = st.pop();
            int cnt1 = pos-1;
            if(s.length()-pos>=2 && s.length()-pos>cnt1)
            return s.length()-pos;
            else
            return cnt1;
        }
        int pos=s.length(),prev=st.peek(),max_len=pos-prev;
        pos=st.pop();
        while(!st.empty())
        {
            prev=st.pop();
            if(pos-prev-1>=2 && pos-prev-1>max_len)
            max_len = pos-prev-1;
            pos=prev;
        }
        if(pos-1>=2 && pos-1>max_len)
        max_len=pos-1;
        return max_len;
    }
}
