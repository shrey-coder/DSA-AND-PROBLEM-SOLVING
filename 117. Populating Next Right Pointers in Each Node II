/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

 class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Deque<Node> q = new ArrayDeque<Node>();
        q.offerLast(root);
        Node temp = null;
        while(!q.isEmpty())
        {
            int size = q.size();
            temp = q.pollFirst();
            while(size>0)
            {
                if(temp.left!=null)
                q.offerLast(temp.left);
                if(temp.right!=null)
                q.offerLast(temp.right);
                if(size==1)
                    break;
                temp.next = q.pollFirst();
                temp=temp.next;
                size--;
            }
        }
        return root;

    }
 }
