/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root)
    {
        if(root==null)  return root;
        if(root.left!=null)
        {
            root.left.next=root.right;
        }
        if(root.right!=null && root.next!=null)
        {
            root.right.next = root.next.left;
        }
        connect(root.left);
        connect(root.right);
        return root;
    }
}
// class Solution {
//     public Node connect(Node root) {
//         if(root==null) return root;
//         Deque<Node> q = new ArrayDeque<Node>();
//         q.offerLast(root);
//         Node temp = null;
//         int size = 0;
//         while(!q.isEmpty())
//         {
//             size = q.size();
//             for(int i=1;i<=size;i++)
//             {
//                 temp = q.pollFirst();
//                 if(i==size)
//                 {
//                     temp.next=null;
//                 }
//                 else
//                     temp.next = q.getFirst();
//                 if(temp.left!=null)
//                 q.offerLast(temp.left);
//                 if(temp.right!=null)
//                 q.offerLast(temp.right);
//             }
//         }
//         return root;

//     }
// }
