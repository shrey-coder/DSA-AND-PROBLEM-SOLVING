/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node,Integer> h1=new HashMap<Node,Integer>();
        HashMap<Integer,Node> h2=new HashMap<Integer,Node>();
        Node head2=null;
        if(head!=null)
        {
        head2=new Node(head.val);
        Node t2=head2;
        Node t1=head;
        int i=0;
        h1.put(t1,i);
        h2.put(i,t2);
        t1=t1.next;
        i++;
        while(t1!=null)
        {
            h1.put(t1,i);
            t2.next=new Node(t1.val);
            t2=t2.next;
            h2.put(i,t2);
            i++;
            t1=t1.next;
        }
        t2=head2;
        while(head!=null)
        {
            if(head.random!=null)
            {
                t2.random=h2.get(h1.get(head.random));
            }
            else
            {
                t2.random=null;
            }
            head=head.next;
            t2=t2.next;

        }
        }
        return head2;
    }
}
