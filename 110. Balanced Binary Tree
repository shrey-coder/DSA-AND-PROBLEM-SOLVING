/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        return isBalancedFast(root).getKey();
    }

    public Pair<Boolean,Integer> isBalancedFast(TreeNode root)
    {
        if(root==null)
        {
            Pair<Boolean,Integer> p = new Pair<Boolean,Integer>(true,0);
            return p;
        }

        Pair<Boolean,Integer> left = isBalancedFast(root.left);
        Pair<Boolean,Integer> right = isBalancedFast(root.right);

        boolean l = left.getKey();
        boolean r = right.getKey();
        boolean c = Math.abs(left.getValue() - right.getValue()) <= 1;

        if(l && r && c)
        {
            return new Pair(true, Math.max(left.getValue(),right.getValue())+1);
        } 
        else
        {
            return new Pair(false,0);
        }
    }

}
